<!DOCTYPE html>
<html>
<head>
	<title></title>
</head>
<body>

<h1>revelation pattern</h1>

<p>from book JavaScript Patterns pdf version, page 114</p>
<h2>The revelation pattern is about having private methods, which you also expose as publicmethods. This could be useful when all the functionality in an object is critical for theworkings of the object and you want to protect it as much as possible. But at the sametime you want to provide public access to some of this functionality because that couldbe useful, too. When you expose methods publicly, you make them vulnerable; someof the users of your public API may modify it, even involuntarily. In ECMAScript 5 youhave the option to freeze an object, but not in the previous versions of the language.</h2>

<pre>
var myarray;

(function(){

	var astr = "[object Array]";
		toString = Object.prototype.toString;

	function isArray(a) {
		return toString.call(a) === astr;
	}

	function indexOf(haystack, needle) {
		var i = 0,
			max = haystack.length;
		for (; i < max; i += 1) {
			if (haystack[i] === needle) {
				return i;
			}
		}
		return -1;
	}

	myarray = {
		isArray: isArray,
		indexOf: indexOf,
		inArray: indexOf
	};

}());

console.log(myarray.isArray([1, 2])); // true
console.log(myarray.isArray({0: 1})); // false
console.log(myarray.indexOf(["a", "b", "z"], "z")); // 2
console.log(myarray.inArray(["a", "b", "z"], "z")); // 2

// Now if something unexpected happens, for example, to the public indexOf(), the private indexOf() is still safe and therefore inArray() will continue to work:

myarray.indexOf = null;
console.log(myarray.inArray(["a", "b", "z"], "z")); // 2
</pre>

<script type="text/javascript">
var myarray;

(function(){

	var astr = "[object Array]";
		toString = Object.prototype.toString;

	function isArray(a) {
		return toString.call(a) === astr;
	}

	function indexOf(haystack, needle) {
		var i = 0,
			max = haystack.length;
		for (; i < max; i += 1) {
			if (haystack[i] === needle) {
				return i;
			}
		}
		return -1;
	}

	myarray = {
		isArray: isArray,
		indexOf: indexOf,
		inArray: indexOf
	};

}());

console.log(myarray.isArray([1, 2])); // true
console.log(myarray.isArray({0: 1})); // false
console.log(myarray.indexOf(["a", "b", "z"], "z")); // 2
console.log(myarray.inArray(["a", "b", "z"], "z")); // 2

// Now if something unexpected happens, for example, to the public indexOf(), the private indexOf() is still safe and therefore inArray() will continue to work:

myarray.indexOf = null;
// myarray.inArray = null;
console.log(myarray.inArray(["a", "b", "z"], "z")); // 2

</script>

</body>
</html>