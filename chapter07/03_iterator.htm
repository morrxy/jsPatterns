<!DOCTYPE html>
<html>
<head>
	<title></title>
</head>
<body>

<h1></h1>
<p>from book JavaScript Patterns pdf version, page 167</p>
<h2>In the iterator pattern, you have an object containing some sort of aggregate data. Thisdata may be stored  internally  in a complex structure, and you want to provide easyaccess to each element of that structure. The consumer of your object doesn’t need toknow how you structure your data; all they need is to work with the individual elements.</h2>
<h2>In the iterator pattern, your object needs to provide a next() method. Calling next()in sequence must return the next consecutive element, where it’s up to you to decidewhat “next” means in your particular data structure.</h2>

<pre>

</pre>

<script type="text/javascript">

var agg = (function() {

	var index = 0,
		data = [1, 2 , 3, 4, 5],
		length = data.length;

	return {

		next: function() {
			var element;
			if (!this.hasNext()) {
				return null;
			};
			element = data[index];
			index = index + 2;
			return element;
		},
	
		hasNext: function() {
			return index < length;
		},

		rewind: function() {
			index = 0;
		},

		current: function() {
			return data[index];
		}

	};

}());

// this loop logs 1, then 3, then 5
while (agg.hasNext()) {
	console.log(agg.next());
}

// go back
agg.rewind();
console.log(agg.current()); // 1

</script>

</body>
</html>