<!DOCTYPE html>
<html>
<head>
	<title></title>
</head>
<body>

<h1>instance in a closure</h1>
<p>from book JavaScript Patterns pdf version, page 162</p>
<h2>The drawback, as we discussed there, is that the rewritten function(in this case the constructor Universe()) will lose any properties added to it between the moment of initial definition and the redefinition. In our specific case anything you add to the prototype of Universe() will not have a live link to the instance created withthe original implementation.</h2>

<pre>

</pre>

<script type="text/javascript">

function Universe() {

	// the cached instance
	var instance = this;

	// proceed as normal
	this.start_time = 0;
	this.bang = "Big";

	// rewrite the constructor
	Universe = function() {
		return instance;
	};

}

// adding to the prototype
Universe.prototype.nothing = true;

var uni = new Universe();

// again adding to the prototype
// after the initial object is created
Universe.prototype.everything = true;

var uni2 = new Universe();

// only the original prototype was
// linked to the objects
console.log(uni.nothing); // true
console.log(uni2.nothing); // true
console.log(uni.everything); // undefined
console.log(uni2.everything); // undefined

// that sounds right:
console.log(uni.constructor.name); // "Universe"

// but that's odd:
console.log(uni.constructor === Universe); // false

// The reason that uni.constructor is no longer the same 
// as the Universe() constructoris because uni.constructor 
// still points to the original constructor, not the redefined one.

</script>

</body>
</html>