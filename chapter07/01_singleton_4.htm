<!DOCTYPE html>
<html>
<head>
	<title></title>
</head>
<body>

<h1>instance in a closure</h1>
<p>from book JavaScript Patterns pdf version, page 162</p>
<h2>If getting the prototype and the constructor pointer working as expected is a require-ment, itâ€™s possible to achieve this with a few tweaks</h2>

<pre>

</pre>

<script type="text/javascript">
	
function Universe() {

	// the cached instance
	var instance;

	// rewrite the constructor
	Universe = function Universe() {
		return instance;
	};

	// carry over the prototype properties
	Universe.prototype = this;

	// the instance
	instance = new Universe();

	// reset the constructor pointer
	instance.constructor = Universe;

	// all the functionality
	instance.start_time = 0;
	instance.bang = "Big";

	return instance;

}

// update prototype and create instance
Universe.prototype.nothing = true;
var uni = new Universe();
Universe.prototype.everything = true;
var uni2 = new Universe();

// it's the same single instance
console.log(uni === uni2); // true

// all prototype peoperties work
// no matter when they were defined
console.log(uni.nothing && uni.everything && uni2.nothing && uni2.everything); // true
// the normal properties work
console.log(uni.bang); // "Big"
// the constructor points correctly
console.log(uni.constructor === Universe); // true

</script>

</body>
</html>