<!DOCTYPE html>
<html>
<head>
	<title></title>
</head>
<body>

<h1>instance in a closure</h1>
<p>from book JavaScript Patterns pdf version, page 162</p>
<h2>An alternative solution would also be to wrap the constructor and the instance in an immediate function. The first time the constructor is invoked, it creates an object and also points the private instance to it. From the second invocation on, the constructor simply returns the private variable. All the tests from the previous snippet will work as expected, too, with this new implementation</h2>

<pre>

</pre>

<script type="text/javascript">
	
var Universe;

(function() {

	var instance;

	Universe = function Universe() {

		if (instance) {
			return instance;
		}

		instance = this;

		// all the functionality
		this.start_time = 0;
		this.bang = "Big";

	};

}());

// update prototype and create instance
Universe.prototype.nothing = true;
var uni = new Universe();
Universe.prototype.everything = true;
var uni2 = new Universe();

// it's the same single instance
console.log(uni === uni2); // true

// all prototype peoperties work
// no matter when they were defined
console.log(uni.nothing && uni.everything && uni2.nothing && uni2.everything); // true
// the normal properties work
console.log(uni.bang); // "Big"
// the constructor points correctly
console.log(uni.constructor === Universe); // true

</script>

</body>
</html>