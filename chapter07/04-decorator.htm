<!DOCTYPE html>
<html>
<head>
	<title></title>
</head>
<body>

<h1>Decorator</h1>
<p>from book JavaScript Patterns pdf version, page 169</p>
<h2>In the decorator pattern, additional functionality can be added to an object dynami-cally, at runtime. When dealing with static classes, this could be a challenge. In Java-Script, objects are mutable, so the process of adding functionality to an object is not aproblem in itself.</h2>
<h2>A convenient feature of the decorator pattern is the customization and configurationof the expected behavior. You start with your plain object, which has some basic func-tionality. Then you pick and choose from an available pool of decorators which onesyou want to use to enhance your plain object and in which order, if the order isimportant.</h2>

<pre>

</pre>

<script type="text/javascript">

function Sale(price) {
	this.price = price || 100;
}

Sale.prototype.getPrice = function() {
	return this.price;
};

Sale.decorators = {};

Sale.decorators.fedtax = {
	getPrice: function() {
		var price = this.uber.getPrice();
		price += price * 5 / 100;
		return price;
	}
};

Sale.decorators.quebec = {
	getPrice: function() {
		var price = this.uber.getPrice();
		price += price * 7.5 / 100;
		return price;
	}
};

Sale.decorators.money = {
	getPrice: function() {
		return "$" + this.uber.getPrice().toFixed(2);
	}
};

Sale.decorators.cdn = {
	getPrice: function() {
		return "CDN$ " + this.uber.getPrice().toFixed(2);
	}
};

Sale.prototype.decorate = function(decorator) {

	var F = function() {},
		overrides = this.constructor.decorators[decorator],
		i, newobj;

	F.prototype = this;

	newobj = new F();
	newobj.uber = F.prototype;

	for (i in overrides) {
		if (overrides.hasOwnProperty(i)) {
			newobj[i] = overrides[i];
		}
	}

	return newobj;

};

// test
var sale = new Sale(100); // the price is 100 dollars
console.log(sale.getPrice()); // 100
sale = sale.decorate('fedtax'); // add federal tax
console.log(sale.getPrice()); // 105
sale = sale.decorate('quebec'); // add provincial tax
console.log(sale.getPrice()); // 112.875
sale = sale.decorate('cdn'); // format like money
console.log(sale.getPrice()); // CDN$ 112.88



</script>

</body>
</html>