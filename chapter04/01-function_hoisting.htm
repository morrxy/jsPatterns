<!DOCTYPE html>
<html>
<head>
	<title></title>
</head>
<body>

<h1>function hoisting</h1>

<p>from book JavaScript Patterns pdf version, page 78</p>
<h2>As you know, all variables, no matter where in the function body they are declared, get hoisted to the top of the function behind the scenes. The same applies for functions because they are just objects assigned to variables. The only “gotcha” is that when usinga function declaration, the definition of the function also gets hoisted, not only itsdeclaration.</h2>
<pre>
function hoistMe() {
	console.log(typeof foo); // "function"
	console.log(typeof bar); // "undefined"

	foo(); // "local foo"
	bar(); // TypeError: bar is not a function

	// function declaration:
	// variable 'foo' and its implementation both get hoisted
	
	function foo() {
		console.log('local foo');
	}

	// function expression:
	// only variable 'bar' gets hoisted
	// not the implementation
	var bar = function() {
		alert('local bar');
	};
}

hoistMe();
</pre>

<script type="text/javascript">
// antipattern
// for illustration only

// global functions
function foo() {
	alert('global foo');
}
function bar() {
	alert('global bar');
}

function hoistMe() {
	console.log(typeof foo); // "function"
	console.log(typeof bar); // "undefined"

	foo(); // "local foo"
	bar(); // TypeError: bar is not a function

	// function declaration:
	// variable 'foo' and its implementation both get hoisted
	
	function foo() {
		console.log('local foo');
	}

	// function expression:
	// only variable 'bar' gets hoisted
	// not the implementation
	var bar = function() {
		alert('local bar');
	};
}

hoistMe();
</script>

</body>
</html>